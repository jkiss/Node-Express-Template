#!/usr/bin/env node

'use strict';

/**
 * IA == InstantArticle
 */

var $      = require('cheerio');
var colors = require('colors');
var config = require('../config');

// CMS Production Env
var cms_prod_id  = 8672;
var cmsProdQuery = require('../models/cms/cmsProdMysql.js');

// Script need
var DB_NAME  = config.cms_mysql_db;
var Match_ID = cms_prod_id;

function queryHTMLContentByInstanceId(id){
  return new Promise((resolve, reject)=>{
    let sql = 'SELECT * FROM '+DB_NAME+'.process_bytes where instance_id = "'+id+'" AND name = "content" AND rev_ = 0 order by create_date DESC';
    cmsProdQuery(sql, (err, rows, fields)=>{
      if(err){
        // throw err;
        reject('queryHTMLContentByInstanceId fail: '+err);
      }else{
        let htmlStr = rows[0].bytes.toString();
        let jsonStr = convertHTMLtoJSON(htmlStr);
        resolve({
          'id': id,
          'jsonStr': jsonStr
        });
      }
    });
  });
}

function updateOneIA(new_IA_Str, id){
  return new Promise((resolve, reject)=>{
    let sql = 'UPDATE '+DB_NAME+'.process_bytes SET bytes = ? WHERE instance_id = ? AND name = "instantArticle" AND rev_ = 0';
    let values = [new_IA_Str, id];
    cmsProdQuery(sql, values, (err, rows, fields)=>{
      if(err){
        reject('updateOneIA '+id+' fail'+err);
      }else{
        resolve(rows);
      }
    });
  });
}

function replaceIAsIfInstantidLessthan(id){
  let sql = 'SELECT instance_id FROM '+DB_NAME+'.process_bytes where instance_id < '+id+' AND name = "instantArticle" AND rev_ = 0';
  cmsProdQuery(sql, (err, rows, fields)=>{
    if(err){
      console.log('Get instance_id fail: '+err);
    }else{
      console.log(rows[0].instance_id);
      let index = 0,
          len = rows.length;
      var replaceIA = ()=>{
        queryHTMLContentByInstanceId(rows[index].instance_id)
          .then((obj)=>{
            console.log(obj);
            return updateOneIA(obj.jsonStr, obj.id);
          })
          .then((results)=>{
            if(results.changedRows > 0){
              console.warn('Update instantarticle successfully!'.red);
            }
            if(results.affectedRows > 0){
              console.warn('Already update...'.red);
            }
            if(++index < len){
              replaceIA();
            }else{
              console.log('Mission Completed!'.rainbow);
              process.exit();
            }
          })
          .catch((err)=>{
            console.log('Error: ' + err);
          });

        // Test:
        // console.log(index + ':' + rows[index].instance_id);
        // if(++index < len){
        //   replaceIA();
        // }else{
        //   console.log('Mission Completed!');
        // }
      };
      replaceIA();
    }
  });
}

// Test:
// queryHTMLContentByInstanceId(4799)
//   .then((obj)=>{
//     console.log(obj);
//     return updateOneIA(obj.jsonStr, obj.id);
//   })
//   .then((rows)=>{
//     console.log(rows);
//   })
//   .catch((err)=>{
//     console.log('Error: ' + err);
//   });

replaceIAsIfInstantidLessthan(Match_ID);


/******************    Tools    ******************/
function convertHTMLtoJSON(HTML){
  HTML = '<div id="cheerio">'+HTML+'</div>';
  let jsonObj = [];
  let elements = $('#cheerio', HTML).find('.styleShowdiv');
  // console.log($(elements[0]).find('.cmsWord'));

  for(var i=0; i<elements.length; i++){
    //images collection
    if ($(elements[i]).find('.cmsImagesCollectionContainer').length >0){
      var imagesJson = JSON.parse($(elements[i]).find('.cmsImagesCollectionContainer').eq(0).attr('data-images'));
      var tempimages = [];
      for (var j=0; j<imagesJson.length; j++){
        tempimages.push({
          'url':imagesJson[j].src,
          'caption':imagesJson[j].caption
        })
      }
      jsonObj.push({
        'contentType': 5,
        'imgs': tempimages
      });
    }
    //video
    else if ($(elements[i]).find('.cmsVideo').length >0){
      var videoJson = JSON.parse($(elements[i]).find('.cmsVideo').eq(0).attr('data-video'));
      jsonObj.push({
        'contentType':6,
        'video':{
          'url':videoJson.videosrc,
          'poster':videoJson.imagesrc,
          'caption':videoJson.caption
        }
      });
    }
    //map
    else if ($(elements[i]).find('.cmsMap').length >0){
      var mapJson = JSON.parse($(elements[i]).find('.cmsMap').eq(0).attr('data-marker'));
      if(mapJson.markerArray.length >=1){
        jsonObj.push({
          'contentType':7,
          'geometry':{
            'coordinates':[mapJson.markerArray[0].lat, mapJson.markerArray[0].lng]
          }
        });
      }
    }
    //image
    else if ($(elements[i]).find('.cmsImage').length >0){
      if($(elements[i]).find('img').length > 0){
        var image = $(elements[i]).find('img').attr('src');
        // console.log(colors.blue(image));
        var caption = $($(elements[i]).find('.imageCaption')[0]).text();
        jsonObj.push({
          'contentType':4,
          'img':{
            'url':image,
            'caption':caption
          }
        });
      }
    }
    //small caption(words)
    else if ($(elements[i]).find('.smallCaption').length >0){
      var words = $($(elements[i]).find('.smallCaption')[0]).text();
      jsonObj.push({
        'contentType':2,
        'content':words
      });
    }
    //reference words
    else if ($(elements[i]).find('.referenceOuter').length >0){
      var content = $($(elements[i]).find('.referenceContent')[0]).text();
      var content_source = $($(elements[i]).find('.referenceContentSource')[0]).text();
      jsonObj.push({
        'contentType':3,
        'content':{
          'text':content,
          'source':content_source
        }
      });
    }
    //normal words,must put behind other kinds of words
    else if ($(elements[i]).find('.cmsWord').length >0){
      var words = $($(elements[i]).find('.cmsWord')[0]).text();
      jsonObj.push({
        'contentType':1,
        'content':words
      });
    }
    else{
      
    }
  }
  return JSON.stringify(jsonObj);
}

var updateReturn = {
  fieldCount: 0,
  affectedRows: 0,
  insertId: 0,
  serverStatus: 2,
  warningCount: 0,
  message: '(Rows matched: 0  Changed: 0  Warnings: 0',
  protocol41: true,
  changedRows: 0 
};


// process.exit();